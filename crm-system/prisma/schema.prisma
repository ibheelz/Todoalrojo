generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String          @id @default(cuid())
  masterEmail     String?         @unique
  masterPhone     String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  firstSeen       DateTime        @default(now())
  lastSeen        DateTime        @default(now())
  firstName       String?
  lastName        String?
  company         String?
  jobTitle        String?
  source          String?
  country         String?
  region          String?
  city            String?
  timezone        String?
  language        String?
  profileImage    String?
  totalClicks     Int             @default(0)
  totalLeads      Int             @default(0)
  totalEvents     Int             @default(0)
  totalRevenue    Decimal         @default(0) @db.Decimal(10, 2)
  isActive        Boolean         @default(true)
  isFraud         Boolean         @default(false)
  isBlacklisted   Boolean         @default(false)
  assignedTeam    String[]
  clicks          Click[]
  mergedCustomers CustomerMerge[] @relation("MergedCustomer")
  events          Event[]
  identifiers     Identifier[]
  leads           Lead[]
  linkClicks      LinkClick[]
  journeyStates   CustomerJourneyState[]

  @@index([masterEmail])
  @@index([masterPhone])
  @@index([country])
  @@index([source])
  @@index([company])
  @@index([createdAt])
  @@index([isFraud])
  @@map("customers")
}

model Identifier {
  id          String         @id @default(cuid())
  customerId  String
  type        IdentifierType
  value       String
  isVerified  Boolean        @default(false)
  isPrimary   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  firstSeenAt DateTime       @default(now())
  lastSeenAt  DateTime       @default(now())
  source      String?
  campaign    String?
  medium      String?
  customer    Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([type, value])
  @@index([customerId])
  @@index([type, value])
  @@index([value])
  @@map("identifiers")
}

model Click {
  id          String    @id @default(cuid())
  customerId  String?
  clickId     String?   @unique
  sessionId   String?
  deviceId    String?
  fingerprint String?
  campaign    String?
  source      String?
  medium      String?
  content     String?
  term        String?
  subId1      String?
  subId2      String?
  subId3      String?
  subId4      String?
  subId5      String?
  ip          String
  userAgent   String?
  referrer    String?
  landingPage String?
  country     String?
  region      String?
  city        String?
  isp         String?
  device      String?
  browser     String?
  os          String?
  isMobile    Boolean   @default(false)
  isTablet    Boolean   @default(false)
  isDesktop   Boolean   @default(false)
  isBot       Boolean   @default(false)
  isVPN       Boolean   @default(false)
  isFraud     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  clickTime   DateTime  @default(now())
  customer    Customer? @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([clickId])
  @@index([campaign])
  @@index([ip])
  @@index([createdAt])
  @@index([country])
  @@index([isFraud])
  @@map("clicks")
}

model Lead {
  id           String   @id @default(cuid())
  customerId   String
  email        String?
  phone        String?
  firstName    String?
  lastName     String?
  customFields Json?
  clickId      String?
  campaign     String?
  source       String?
  medium       String?
  ip           String
  userAgent    String?
  referrer     String?
  landingPage  String?
  formUrl      String?
  country      String?
  region       String?
  city         String?
  isEmailValid Boolean  @default(false)
  isPhoneValid Boolean  @default(false)
  isDuplicate  Boolean  @default(false)
  qualityScore Int?     @default(0)
  clientId     String?
  brandId      String?
  value        Decimal? @db.Decimal(10, 2)
  currency     String?  @default("USD")
  createdAt    DateTime @default(now())
  submittedAt  DateTime @default(now())
  customer     Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([email])
  @@index([phone])
  @@index([campaign])
  @@index([clientId])
  @@index([createdAt])
  @@index([isDuplicate])
  @@map("leads")
}

model Event {
  id          String   @id @default(cuid())
  customerId  String
  eventType   String
  eventName   String?
  category    String?
  properties  Json?
  value       Decimal? @db.Decimal(10, 2)
  currency    String?  @default("USD")
  quantity    Int?     @default(1)
  campaign    String?
  source      String?
  medium      String?
  clickId     String?
  ip          String?
  userAgent   String?
  referrer    String?
  pageUrl     String?
  clientId    String?
  brandId     String?
  isConverted Boolean  @default(false)
  isRevenue   Boolean  @default(false)
  isFraud     Boolean  @default(false)
  createdAt   DateTime @default(now())
  eventTime   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([eventType])
  @@index([campaign])
  @@index([clientId])
  @@index([createdAt])
  @@index([isRevenue])
  @@map("events")
}

model CustomerMerge {
  id               String   @id @default(cuid())
  masterCustomerId String
  mergedCustomerId String
  reason           String
  confidence       Int      @default(100)
  mergedAt         DateTime @default(now())
  mergedBy         String?
  mergedData       Json?
  masterCustomer   Customer @relation("MergedCustomer", fields: [masterCustomerId], references: [id])

  @@unique([masterCustomerId, mergedCustomerId])
  @@index([masterCustomerId])
  @@map("customer_merges")
}

model Campaign {
  id                    String               @id @default(cuid())
  name                  String
  slug                  String               @unique
  description           String?
  clientId              String?
  brandId               String?
  logoUrl               String?
  resetAt               DateTime?
  conversionTypes       Json?
  isActive              Boolean              @default(true)
  totalClicks           Int                  @default(0)
  totalLeads            Int                  @default(0)
  totalEvents           Int                  @default(0)
  totalRevenue          Decimal              @default(0) @db.Decimal(10, 2)
  fraudRate             Decimal              @default(0) @db.Decimal(5, 4)
  duplicateRate         Decimal              @default(0) @db.Decimal(5, 4)
  conversionRate        Decimal              @default(0) @db.Decimal(5, 4)
  registrations         Int?
  ftd                   Int?
  approvedRegistrations Int?
  qualifiedDeposits     Int?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  campaignInfluencers   CampaignInfluencer[]

  @@index([slug])
  @@index([clientId])
  @@index([isActive])
  @@map("campaigns")
}

model Client {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  email            String?  @unique
  passwordHash     String?
  isActive         Boolean  @default(true)
  canViewReports   Boolean  @default(true)
  canExportData    Boolean  @default(true)
  canViewAnalytics Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  operators        Operator[]

  @@index([slug])
  @@index([email])
  @@map("clients")
}

model AdminUser {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  role         AdminRole @default(ANALYST)
  firstName    String?
  lastName     String?
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([email])
  @@map("admin_users")
}

model ShortLink {
  id              String           @id @default(cuid())
  shortCode       String           @unique
  originalUrl     String
  title           String?
  description     String?
  campaign        String?
  source          String?
  medium          String?
  content         String?
  term            String?
  customDomain    String?          @default("short.ly")
  password        String?
  expiresAt       DateTime?
  isActive        Boolean          @default(true)
  isPublic        Boolean          @default(true)
  allowBots       Boolean          @default(false)
  trackClicks     Boolean          @default(true)
  userId          String?
  clientId        String?
  totalClicks     Int              @default(0)
  uniqueClicks    Int              @default(0)
  lastClickAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  clicks          LinkClick[]
  linkInfluencers LinkInfluencer[]

  @@index([shortCode])
  @@index([userId])
  @@index([clientId])
  @@index([campaign])
  @@index([isActive])
  @@index([createdAt])
  @@map("short_links")
}

model LinkClick {
  id           String    @id @default(cuid())
  linkId       String
  shortCode    String
  customerId   String?
  sessionId    String?
  clickId      String?   @unique
  ip           String
  userAgent    String?
  referrer     String?
  country      String?
  region       String?
  city         String?
  device       String?
  browser      String?
  os           String?
  isMobile     Boolean   @default(false)
  isTablet     Boolean   @default(false)
  isDesktop    Boolean   @default(false)
  isBot        Boolean   @default(false)
  isVPN        Boolean   @default(false)
  isFraud      Boolean   @default(false)
  isUnique     Boolean   @default(true)
  redirectTime Int?
  createdAt    DateTime  @default(now())
  clickTime    DateTime  @default(now())
  customer     Customer? @relation(fields: [customerId], references: [id])
  link         ShortLink @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId])
  @@index([shortCode])
  @@index([customerId])
  @@index([ip])
  @@index([createdAt])
  @@index([isBot])
  @@index([isFraud])
  @@map("link_clicks")
}

model AuditLog {
  id         String   @id @default(cuid())
  customerId String?
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  changes    Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([customerId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Influencer {
  id                  String               @id @default(cuid())
  name                String
  email               String?              @unique
  phone               String?
  socialHandle        String?
  platform            String?
  followers           Int?                 @default(0)
  engagementRate      Decimal?             @db.Decimal(5, 2)
  category            String?
  location            String?
  resetAt             DateTime?
  profileImage        String?
  status              String               @default("active")
  totalLeads          Int                  @default(0)
  totalClicks         Int                  @default(0)
  totalRegs           Int                  @default(0)
  totalFtd            Int                  @default(0)
  commissionRate      Decimal?             @db.Decimal(5, 4)
  paymentMethod       String?
  paymentDetails      Json?
  notes               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  campaignInfluencers CampaignInfluencer[]
  linkInfluencers     LinkInfluencer[]

  @@index([email])
  @@index([platform])
  @@index([status])
  @@index([createdAt])
  @@map("influencers")
}

model CampaignInfluencer {
  id           String     @id @default(cuid())
  campaignId   String
  influencerId String
  assignedAt   DateTime   @default(now())
  assignedBy   String?
  isActive     Boolean    @default(true)
  notes        String?
  campaign     Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([campaignId, influencerId])
  @@index([campaignId])
  @@index([influencerId])
  @@map("campaign_influencers")
}

model LinkInfluencer {
  id           String     @id @default(cuid())
  linkId       String
  influencerId String
  assignedAt   DateTime   @default(now())
  assignedBy   String?
  isActive     Boolean    @default(true)
  notes        String?
  influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  link         ShortLink  @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([linkId, influencerId])
  @@index([linkId])
  @@index([influencerId])
  @@map("link_influencers")
}

enum IdentifierType {
  EMAIL
  PHONE
  DEVICE_ID
  CLICK_ID
  SESSION_ID
  FINGERPRINT
  IP_ADDRESS
  USER_AGENT
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  ANALYST
  VIEWER
}

// Journey Automation Models
model CustomerJourneyState {
  id                String   @id @default(cuid())
  customerId        String
  operatorId        String   // clientId/brandId reference
  stage             Int      @default(-1) // -1: not registered, 0: registered no deposit, 1-2: deposits, 3+: high value
  depositCount      Int      @default(0)
  totalDepositValue Decimal  @default(0) @db.Decimal(10, 2)
  lastDepositAt     DateTime?

  // Frequency caps
  emailCount        Int      @default(0)
  smsCount          Int      @default(0)
  lastEmailAt       DateTime?
  lastSmsAt         DateTime?

  // Unsubscribe preferences
  unsubEmail        Boolean  @default(false)
  unsubSms          Boolean  @default(false)
  unsubGlobal       Boolean  @default(false)

  // Journey state
  currentJourney    String?  // "acquisition", "retention", "stopped"
  journeyStartedAt  DateTime?
  journeyExitedAt   DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  journeyMessages   JourneyMessage[]

  @@unique([customerId, operatorId])
  @@index([customerId])
  @@index([operatorId])
  @@index([stage])
  @@index([currentJourney])
  @@map("customer_journey_states")
}

model JourneyMessage {
  id              String   @id @default(cuid())
  journeyStateId  String
  messageType     MessageType
  channel         MessageChannel
  journeyType     JourneyType
  dayNumber       Int      // Day 0, 1, 3, 5, 7 etc.
  stepNumber      Int      // Email 1, 2, 3 or SMS 1, 2
  subject         String?
  content         String   @db.Text

  // Scheduling
  scheduledFor    DateTime
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?

  // Status
  status          MessageStatus @default(PENDING)
  errorMessage    String?

  // Provider tracking
  providerId      String?  // ESP or SMS provider message ID
  providerName    String?  // "sendgrid", "twilio", etc.

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  journeyState    CustomerJourneyState @relation(fields: [journeyStateId], references: [id], onDelete: Cascade)

  @@index([journeyStateId])
  @@index([status])
  @@index([scheduledFor])
  @@index([channel])
  @@index([journeyType])
  @@map("journey_messages")
}

model OperatorPostback {
  id          String        @id @default(cuid())
  customerId  String?       // Resolved customer
  operatorId  String
  eventType   PostbackType

  // Raw postback data
  clickId     String?
  email       String?
  phone       String?
  userId      String?       // Operator's user ID

  // Event details
  depositAmount Decimal?    @db.Decimal(10, 2)
  currency      String?     @default("USD")

  // Metadata
  rawPayload    Json?
  ip            String?
  processedAt   DateTime?

  createdAt     DateTime    @default(now())

  @@index([customerId])
  @@index([operatorId])
  @@index([eventType])
  @@index([clickId])
  @@index([email])
  @@map("operator_postbacks")
}

model JourneyTemplate {
  id              String   @id @default(cuid())
  name            String
  journeyType     JourneyType
  operatorId      String?  // null = default template for all

  // Configuration
  isActive        Boolean  @default(true)
  maxEmails       Int      @default(3)
  maxSms          Int      @default(2)
  maxMessagesPerDay Int    @default(1)

  // Template content
  steps           Json     // Array of message steps with timing

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  operator        Operator? @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@index([journeyType])
  @@index([operatorId])
  @@index([isActive])
  @@map("journey_templates")
}

model MessageTemplate {
  id            String         @id @default(cuid())
  operatorId    String         // Which brand/operator
  journeyType   JourneyType    // ACQUISITION or RETENTION
  messageType   MessageType    // WELCOME, BONUS_REMINDER, etc.
  dayNumber     Int            // When to send (day 0, 1, 3, etc.)
  channel       MessageChannel // EMAIL or SMS

  // Content
  subject       String?        // For emails
  content       String         @db.Text // The actual message
  ctaLink       String?        // Call-to-action link
  ctaText       String?        // CTA button text

  // Status
  isActive      Boolean        @default(true)

  // Metadata
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([operatorId, journeyType, messageType, dayNumber, channel])
  @@index([operatorId])
  @@index([journeyType])
  @@index([isActive])
  @@map("message_templates")
}

enum MessageType {
  WELCOME
  BONUS_REMINDER
  SOCIAL_PROOF
  URGENCY
  FINAL_NUDGE
  RELOAD
  VIP_OFFER
}

enum MessageChannel {
  EMAIL
  SMS
}

enum JourneyType {
  ACQUISITION
  RETENTION
}

enum MessageStatus {
  PENDING
  SCHEDULED
  SENT
  DELIVERED
  OPENED
  CLICKED
  FAILED
  CANCELLED
}

enum PostbackType {
  REGISTRATION
  FIRST_DEPOSIT
  DEPOSIT
  WITHDRAWAL
}

// Multi-Operator Management Models
model Operator {
  id                  String   @id @default(cuid())
  clientId            String
  name                String   // "Roobet", "Rushbet", etc.
  slug                String   @unique
  brand               String?  // Display name

  // Contact & Branding
  emailDomain         String?  // "roobet.com" for sender emails
  emailFromName       String?  // "Roobet Casino"
  emailFromAddress    String?  // "noreply@roobet.com"
  logoUrl             String?
  primaryColor        String?  // Brand color for emails

  // SMS Configuration
  smsEnabled          Boolean  @default(true)
  smsSender           String?  // "ROOBET" or phone number
  smsProvider         String   @default("laaffic") // "laaffic", "twilio"

  // Operator Status
  status              OperatorStatus @default(ACTIVE)

  // Segmentation & Recycling Rules
  protectHighValue    Boolean  @default(true) // Protect stage 3+ from cross-sell
  recycleAfterDays    Int      @default(30)   // Days before eligible for another operator
  minStageForRecycle  Int      @default(-1)   // Minimum stage to be recyclable
  maxStageForRecycle  Int      @default(1)    // Maximum stage to be recyclable

  // Quality Metrics (calculated)
  totalLeads          Int      @default(0)
  totalRegistrations  Int      @default(0)
  totalFTD            Int      @default(0)
  totalRevenue        Decimal  @default(0) @db.Decimal(12, 2)

  // Rates (calculated)
  regRate             Decimal? @db.Decimal(5, 4) // registrations / leads
  ftdRate             Decimal? @db.Decimal(5, 4) // ftd / registrations

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  client              Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  journeyTemplates    JourneyTemplate[]
  recyclingRules      OperatorRecyclingRule[]

  @@index([clientId])
  @@index([slug])
  @@index([status])
  @@map("operators")
}

model OperatorRecyclingRule {
  id                    String   @id @default(cuid())
  sourceOperatorId      String   // "Roobet"
  targetOperatorId      String   // "Rushbet"

  // Eligibility Rules
  minDaysSinceLastDeposit Int    @default(30)  // Must be inactive for X days
  maxStage                Int    @default(1)   // Max stage 1 (first deposit only)
  minStage                Int    @default(-1)  // Min stage -1 (all)
  excludeHighValue        Boolean @default(true) // Exclude stage 3+

  // Limits
  maxRecyclesPerUser      Int    @default(2)   // Max times a user can be recycled
  cooldownDays            Int    @default(14)  // Days between recycles for same user

  isActive                Boolean @default(true)
  priority                Int    @default(0)   // Higher priority rules run first

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  sourceOperator          Operator @relation(fields: [sourceOperatorId], references: [id], onDelete: Cascade)

  @@unique([sourceOperatorId, targetOperatorId])
  @@index([sourceOperatorId])
  @@index([targetOperatorId])
  @@index([isActive])
  @@map("operator_recycling_rules")
}

model CustomerRecyclingHistory {
  id                String   @id @default(cuid())
  customerId        String
  fromOperatorId    String
  toOperatorId      String

  // Context at time of recycle
  stageAtRecycle    Int
  daysSinceDeposit  Int?
  lastDepositAmount Decimal? @db.Decimal(10, 2)

  // Outcome tracking
  recycledAt        DateTime @default(now())
  convertedAt       DateTime? // If they deposit with new operator
  conversionValue   Decimal?  @db.Decimal(10, 2)

  // Journey started
  journeyStarted    Boolean  @default(false)
  journeyType       String?  // "acquisition", "retention"

  @@index([customerId])
  @@index([fromOperatorId])
  @@index([toOperatorId])
  @@index([recycledAt])
  @@map("customer_recycling_history")
}

model OperatorMetrics {
  id              String   @id @default(cuid())
  operatorId      String
  date            DateTime @db.Date

  // Daily metrics
  leads           Int      @default(0)
  registrations   Int      @default(0)
  ftd             Int      @default(0)
  deposits        Int      @default(0)
  revenue         Decimal  @default(0) @db.Decimal(12, 2)

  // Journey metrics
  journeysStarted Int      @default(0)
  messagesStart   Int      @default(0)
  messagesFailed  Int      @default(0)

  // Recycling metrics
  recycledIn      Int      @default(0) // Players recycled TO this operator
  recycledOut     Int      @default(0) // Players recycled FROM this operator

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([operatorId, date])
  @@index([operatorId])
  @@index([date])
  @@map("operator_metrics")
}

enum OperatorStatus {
  ACTIVE        // Actively acquiring and retaining players
  PAUSED        // Temporarily paused, protect all players
  INACTIVE      // No longer active, all players recyclable
  TESTING       // Testing mode, limited campaigns
}
