generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String          @id @default(cuid())
  masterEmail     String?         @unique
  masterPhone     String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  firstSeen       DateTime        @default(now())
  lastSeen        DateTime        @default(now())
  firstName       String?
  lastName        String?
  company         String?
  jobTitle        String?
  source          String?
  country         String?
  region          String?
  city            String?
  timezone        String?
  language        String?
  profileImage    String?
  totalClicks     Int             @default(0)
  totalLeads      Int             @default(0)
  totalEvents     Int             @default(0)
  totalRevenue    Decimal         @default(0) @db.Decimal(10, 2)
  isActive        Boolean         @default(true)
  isFraud         Boolean         @default(false)
  isBlacklisted   Boolean         @default(false)
  assignedTeam    String[]
  clicks          Click[]
  mergedCustomers CustomerMerge[] @relation("MergedCustomer")
  events          Event[]
  identifiers     Identifier[]
  leads           Lead[]

  @@index([masterEmail])
  @@index([masterPhone])
  @@index([country])
  @@index([source])
  @@index([company])
  @@index([createdAt])
  @@index([isFraud])
  @@map("customers")
}

model Identifier {
  id          String         @id @default(cuid())
  customerId  String
  type        IdentifierType
  value       String
  isVerified  Boolean        @default(false)
  isPrimary   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  firstSeenAt DateTime       @default(now())
  lastSeenAt  DateTime       @default(now())
  source      String?
  campaign    String?
  medium      String?
  customer    Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([type, value])
  @@index([customerId])
  @@index([type, value])
  @@index([value])
  @@map("identifiers")
}

model Click {
  id          String    @id @default(cuid())
  customerId  String?
  clickId     String?   @unique
  sessionId   String?
  deviceId    String?
  fingerprint String?
  campaign    String?
  source      String?
  medium      String?
  content     String?
  term        String?
  subId1      String?
  subId2      String?
  subId3      String?
  subId4      String?
  subId5      String?
  ip          String
  userAgent   String?
  referrer    String?
  landingPage String?
  country     String?
  region      String?
  city        String?
  isp         String?
  device      String?
  browser     String?
  os          String?
  isMobile    Boolean   @default(false)
  isTablet    Boolean   @default(false)
  isDesktop   Boolean   @default(false)
  isBot       Boolean   @default(false)
  isVPN       Boolean   @default(false)
  isFraud     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  clickTime   DateTime  @default(now())
  customer    Customer? @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([clickId])
  @@index([campaign])
  @@index([ip])
  @@index([createdAt])
  @@index([country])
  @@index([isFraud])
  @@map("clicks")
}

model Lead {
  id           String   @id @default(cuid())
  customerId   String
  email        String?
  phone        String?
  firstName    String?
  lastName     String?
  customFields Json?
  clickId      String?
  campaign     String?
  source       String?
  medium       String?
  ip           String
  userAgent    String?
  referrer     String?
  landingPage  String?
  formUrl      String?
  country      String?
  region       String?
  city         String?
  isEmailValid Boolean  @default(false)
  isPhoneValid Boolean  @default(false)
  isDuplicate  Boolean  @default(false)
  qualityScore Int?     @default(0)
  clientId     String?
  brandId      String?
  value        Decimal? @db.Decimal(10, 2)
  currency     String?  @default("USD")
  createdAt    DateTime @default(now())
  submittedAt  DateTime @default(now())
  customer     Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([email])
  @@index([phone])
  @@index([campaign])
  @@index([clientId])
  @@index([createdAt])
  @@index([isDuplicate])
  @@map("leads")
}

model Event {
  id          String   @id @default(cuid())
  customerId  String
  eventType   String
  eventName   String?
  category    String?
  properties  Json?
  value       Decimal? @db.Decimal(10, 2)
  currency    String?  @default("USD")
  quantity    Int?     @default(1)
  campaign    String?
  source      String?
  medium      String?
  clickId     String?
  ip          String?
  userAgent   String?
  referrer    String?
  pageUrl     String?
  clientId    String?
  brandId     String?
  isConverted Boolean  @default(false)
  isRevenue   Boolean  @default(false)
  isFraud     Boolean  @default(false)
  createdAt   DateTime @default(now())
  eventTime   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([eventType])
  @@index([campaign])
  @@index([clientId])
  @@index([createdAt])
  @@index([isRevenue])
  @@map("events")
}

model CustomerMerge {
  id               String   @id @default(cuid())
  masterCustomerId String
  mergedCustomerId String
  reason           String
  confidence       Int      @default(100)
  mergedAt         DateTime @default(now())
  mergedBy         String?
  mergedData       Json?
  masterCustomer   Customer @relation("MergedCustomer", fields: [masterCustomerId], references: [id])

  @@unique([masterCustomerId, mergedCustomerId])
  @@index([masterCustomerId])
  @@map("customer_merges")
}

model Campaign {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?
  clientId       String?
  brandId        String?
  isActive       Boolean  @default(true)
  totalClicks    Int      @default(0)
  totalLeads     Int      @default(0)
  totalEvents    Int      @default(0)
  totalRevenue   Decimal  @default(0) @db.Decimal(10, 2)
  fraudRate      Decimal  @default(0) @db.Decimal(5, 4)
  duplicateRate  Decimal  @default(0) @db.Decimal(5, 4)
  conversionRate Decimal  @default(0) @db.Decimal(5, 4)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([slug])
  @@index([clientId])
  @@index([isActive])
  @@map("campaigns")
}

model Client {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  email            String?  @unique
  passwordHash     String?
  isActive         Boolean  @default(true)
  canViewReports   Boolean  @default(true)
  canExportData    Boolean  @default(true)
  canViewAnalytics Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([slug])
  @@index([email])
  @@map("clients")
}

model AdminUser {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  role         AdminRole @default(ANALYST)
  firstName    String?
  lastName     String?
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([email])
  @@map("admin_users")
}

model AuditLog {
  id         String   @id @default(cuid())
  customerId String?
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  changes    Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([customerId])
  @@index([createdAt])
  @@map("audit_logs")
}

enum IdentifierType {
  EMAIL
  PHONE
  DEVICE_ID
  CLICK_ID
  SESSION_ID
  FINGERPRINT
  IP_ADDRESS
  USER_AGENT
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  ANALYST
  VIEWER
}
