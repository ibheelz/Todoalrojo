'use client'

import { useEffect, useState } from 'react'
import { AnalyticsIcon, PlusIcon, GridIcon, TableIcon, TargetIcon, WarningIcon } from '@/components/ui/icons'

interface CampaignStats {
  totalClicks: number
  totalLeads: number
  totalEvents: number
  uniqueCustomers: number
  duplicateLeads: number
  conversionRate: number
  duplicateRate: number
}

interface ConversionType {
  id: string
  name: string
  description: string | null
  isActive: boolean
}

interface CampaignConversionType {
  id: string
  conversionType: ConversionType
}

interface Campaign {
  id: string
  name: string
  slug: string
  description: string | null
  logoUrl: string | null
  clientId: string | null
  brandId: string | null
  isActive: boolean
  createdAt: string
  updatedAt: string
  stats: CampaignStats
  conversionTypes: CampaignConversionType[]
}

export default function CampaignsPage() {
  const [campaigns, setCampaigns] = useState<Campaign[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [filterBy, setFilterBy] = useState('all')
  const [viewMode, setViewMode] = useState('grid')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [conversionTypes, setConversionTypes] = useState<ConversionType[]>([])
  const [isCreating, setIsCreating] = useState(false)
  const [formData, setFormData] = useState({
    name: '',
    slug: '',
    description: '',
    logoUrl: '',
    conversionTypeIds: [] as string[]
  })
  const [editingCampaign, setEditingCampaign] = useState<Campaign | null>(null)
  const [showNewConversionForm, setShowNewConversionForm] = useState(false)
  const [newConversionData, setNewConversionData] = useState({
    name: '',
    description: ''
  })
  const [isCreatingConversion, setIsCreatingConversion] = useState(false)

  useEffect(() => {
    fetchCampaigns()
    fetchConversionTypes()
  }, [])

  const fetchCampaigns = async () => {
    try {
      const response = await fetch('/api/campaigns?includeStats=true')
      const data = await response.json()

      if (data.success) {
        setCampaigns(data.campaigns)
      } else {
        setError('Failed to load campaigns')
      }
    } catch (err) {
      setError('Failed to fetch campaigns')
    } finally {
      setLoading(false)
    }
  }

  const fetchConversionTypes = async () => {
    try {
      const response = await fetch('/api/conversion-types')
      const data = await response.json()
      if (data.success) {
        setConversionTypes(data.data)
      }
    } catch (err) {
      console.error('Failed to fetch conversion types:', err)
    }
  }

  const createCampaign = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsCreating(true)

    try {
      const url = editingCampaign
        ? `/api/campaigns/${editingCampaign.id}`
        : '/api/campaigns'

      const method = editingCampaign ? 'PUT' : 'POST'

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      const data = await response.json()

      if (data.success) {
        resetModal()
        fetchCampaigns() // Refresh campaigns list
      } else {
        setError(data.error || `Failed to ${editingCampaign ? 'update' : 'create'} campaign`)
      }
    } catch (err) {
      setError(`Failed to ${editingCampaign ? 'update' : 'create'} campaign`)
    } finally {
      setIsCreating(false)
    }
  }

  const handleConversionTypeToggle = (conversionTypeId: string) => {
    setFormData(prev => ({
      ...prev,
      conversionTypeIds: prev.conversionTypeIds.includes(conversionTypeId)
        ? prev.conversionTypeIds.filter(id => id !== conversionTypeId)
        : [...prev.conversionTypeIds, conversionTypeId]
    }))
  }

  const createNewConversionType = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsCreatingConversion(true)

    try {
      const response = await fetch('/api/conversion-types', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newConversionData)
      })

      const result = await response.json()

      if (result.success) {
        // Refresh the conversion types list
        await fetchConversionTypes()

        // Automatically select the new conversion type
        setFormData(prev => ({
          ...prev,
          conversionTypeIds: [...prev.conversionTypeIds, result.data.id]
        }))

        // Reset form and hide it
        setNewConversionData({ name: '', description: '' })
        setShowNewConversionForm(false)
      } else {
        alert('Error creating conversion type: ' + result.error)
      }
    } catch (error) {
      console.error('Error creating conversion type:', error)
      alert('Error creating conversion type')
    } finally {
      setIsCreatingConversion(false)
    }
  }

  const generateSlug = (name: string) => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '')
  }

  const handleNameChange = (name: string) => {
    setFormData(prev => ({
      ...prev,
      name,
      slug: editingCampaign ? prev.slug : generateSlug(name)
    }))
  }

  const handleEditCampaign = (campaign: Campaign) => {
    setEditingCampaign(campaign)
    setFormData({
      name: campaign.name,
      slug: campaign.slug,
      description: campaign.description || '',
      logoUrl: campaign.logoUrl || '',
      conversionTypeIds: campaign.conversionTypes.map(ct => ct.conversionType.id)
    })
    setShowCreateModal(true)
  }

  const resetModal = () => {
    setShowCreateModal(false)
    setEditingCampaign(null)
    setFormData({
      name: '',
      slug: '',
      description: '',
      logoUrl: '',
      conversionTypeIds: []
    })
    setShowNewConversionForm(false)
    setNewConversionData({ name: '', description: '' })
  }

  const getRateColor = (rate: number, type: 'conversion' | 'duplicate') => {
    if (type === 'conversion') {
      if (rate >= 5) return 'text-green-400'
      if (rate >= 2) return 'text-yellow-400'
      return 'text-red-400'
    } else {
      // For duplicate rate, lower is better
      if (rate <= 5) return 'text-green-400'
      if (rate <= 15) return 'text-yellow-400'
      return 'text-red-400'
    }
  }

  const filteredCampaigns = campaigns.filter((campaign) => {
    const matchesSearch =
      campaign.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      campaign.slug.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (campaign.description && campaign.description.toLowerCase().includes(searchQuery.toLowerCase()))

    const matchesFilter = filterBy === 'all' ||
      (filterBy === 'active' && campaign.isActive) ||
      (filterBy === 'inactive' && !campaign.isActive)

    return matchesSearch && matchesFilter
  })

  if (loading) {
    return (
      <div className="space-y-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-black text-primary">
              Campaign Management
            </h1>
            <p className="text-lg text-muted-foreground font-medium mt-2">
              Create, monitor, and optimize your marketing campaigns
            </p>
          </div>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="premium-card p-8 shimmer">
              <div className="space-y-4">
                <div className="h-6 bg-muted/20 rounded w-2/3"></div>
                <div className="h-4 bg-muted/20 rounded w-1/2"></div>
                <div className="grid grid-cols-3 gap-4">
                  <div className="h-8 bg-muted/20 rounded"></div>
                  <div className="h-8 bg-muted/20 rounded"></div>
                  <div className="h-8 bg-muted/20 rounded"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-8">
        <div className="premium-card p-12 text-center">
          <div className="w-20 h-20 bg-primary rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
            <WarningIcon size={32} />
          </div>
          <h2 className="text-2xl font-black text-foreground mb-2">Error Loading Campaigns</h2>
          <p className="text-muted-foreground mb-6">{error}</p>
          <button onClick={fetchCampaigns} className="premium-button-primary">
            Try Again
          </button>
        </div>
      </div>
    )
  }

  // Calculate overall stats
  const overallStats = campaigns.reduce(
    (acc, campaign) => {
      return {
        totalClicks: acc.totalClicks + campaign.stats.totalClicks,
        totalLeads: acc.totalLeads + campaign.stats.totalLeads,
        totalUsers: acc.totalUsers + campaign.stats.uniqueCustomers,
        totalCampaigns: acc.totalCampaigns + 1,
      }
    },
    { totalClicks: 0, totalLeads: 0, totalUsers: 0, totalCampaigns: 0 }
  )

  const overallConversionRate = overallStats.totalClicks > 0
    ? Math.round((overallStats.totalLeads / overallStats.totalClicks) * 10000) / 100
    : 0

  return (
    <div className="space-y-2 xxs:space-y-1 xs:space-y-3 sm:space-y-6 p-1 xxs:p-1 xs:p-2 sm:p-4 lg:p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-base xxs:text-sm xs:text-lg sm:text-2xl lg:text-3xl xl:text-4xl font-bold text-primary">Campaign Management</h1>
          <p className="text-xs sm:text-sm text-muted-foreground">Create, monitor, and optimize your marketing campaigns</p>
        </div>
        <div className="flex items-center space-x-3">
          <button className="premium-button-secondary">
            <AnalyticsIcon size={16} className="mr-2" />
            Analytics
          </button>
          <button
            onClick={() => setShowCreateModal(true)}
            className="premium-button-primary"
          >
            <PlusIcon size={16} className="mr-2" />
            New Campaign
          </button>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <div className="premium-card p-6 text-center glow-effect">
          <div className="text-3xl font-black text-primary mb-2">{overallStats.totalCampaigns}</div>
          <div className="text-sm font-bold text-muted-foreground uppercase tracking-wider">Active Campaigns</div>
        </div>
        <div className="premium-card p-6 text-center glow-effect">
          <div className="text-3xl font-black text-foreground mb-2">{overallStats.totalClicks.toLocaleString()}</div>
          <div className="text-sm font-bold text-muted-foreground uppercase tracking-wider">Total Clicks</div>
        </div>
        <div className="premium-card p-6 text-center glow-effect">
          <div className="text-3xl font-black text-primary mb-2">{overallStats.totalLeads.toLocaleString()}</div>
          <div className="text-sm font-bold text-muted-foreground uppercase tracking-wider">Total Leads</div>
        </div>
        <div className="premium-card p-6 text-center glow-effect">
          <div className="text-3xl font-black text-foreground mb-2">{overallConversionRate}%</div>
          <div className="text-sm font-bold text-muted-foreground uppercase tracking-wider">Conversion Rate</div>
        </div>
        <div className="premium-card p-6 text-center glow-effect">
          <div className="text-3xl font-black text-foreground mb-2">{overallStats.totalUsers.toLocaleString()}</div>
          <div className="text-sm font-bold text-muted-foreground uppercase tracking-wider">Unique Customers</div>
        </div>
      </div>

      {/* Search & Controls */}
      <div className="premium-card p-6">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="flex-1">
            <input
              type="search"
              placeholder="Search campaigns by name, slug, or description..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="premium-input"
            />
          </div>
          <div className="flex gap-3">
            <select
              value={filterBy}
              onChange={(e) => setFilterBy(e.target.value)}
              className="premium-input min-w-32"
            >
              <option value="all">All Status</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
            <div className="flex bg-muted/20 rounded-2xl p-1">
              <button
                onClick={() => setViewMode('grid')}
                className={`px-3 py-2 rounded-xl text-xs font-semibold transition-all ${
                  viewMode === 'grid'
                    ? 'bg-primary text-primary-foreground shadow-lg'
                    : 'text-muted-foreground hover:text-foreground'
                }`}
              >
                <GridIcon size={12} className="mr-1" />
                Grid
              </button>
              <button
                onClick={() => setViewMode('table')}
                className={`px-3 py-2 rounded-xl text-xs font-semibold transition-all ${
                  viewMode === 'table'
                    ? 'bg-primary text-primary-foreground shadow-lg'
                    : 'text-muted-foreground hover:text-foreground'
                }`}
              >
                <TableIcon size={12} className="mr-1" />
                Table
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Campaigns Display */}
      {filteredCampaigns.length === 0 ? (
        <div className="premium-card p-12 text-center">
          <div className="w-20 h-20 bg-primary rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
            <AnalyticsIcon size={32} />
          </div>
          <h2 className="text-2xl font-black text-foreground mb-2">No Campaigns Found</h2>
          <p className="text-muted-foreground mb-6">
            {searchQuery || filterBy !== 'all'
              ? 'No campaigns match your search criteria'
              : 'Get started by creating your first campaign'
            }
          </p>
          <button
            onClick={() => setShowCreateModal(true)}
            className="premium-button-primary"
          >
            <PlusIcon size={16} className="mr-2" />
            Create Campaign
          </button>
        </div>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {filteredCampaigns.map((campaign, index) => (
            <div
              key={campaign.id}
              className="premium-card p-8 glow-effect"
            >
              <div className="space-y-6">
                {/* Header */}
                <div className="flex items-start justify-between">
                  <div className="space-y-3">
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-12 bg-primary rounded-2xl flex items-center justify-center shadow-lg overflow-hidden">
                        {campaign.logoUrl ? (
                          <img
                            src={campaign.logoUrl}
                            alt={`${campaign.name} logo`}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <TargetIcon size={24} />
                        )}
                      </div>
                      <div>
                        <h3 className="text-xl font-black text-foreground">{campaign.name}</h3>
                        <p className="text-sm text-muted-foreground font-medium">{campaign.slug}</p>
                        {campaign.description && (
                          <p className="text-xs text-gray-400 mt-1">{campaign.description}</p>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-bold ${
                        campaign.isActive
                          ? 'bg-green-500/20 text-primary'
                          : 'bg-red-500/20 text-red-500'
                      }`}>
                        {campaign.isActive ? 'Active' : 'Inactive'}
                      </span>
                      <div className="text-xs text-muted-foreground">
                        Created: {new Date(campaign.createdAt).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={() => handleEditCampaign(campaign)}
                    className="premium-button-secondary px-4 py-2 text-xs"
                  >
                    Manage
                  </button>
                </div>

                {/* Performance Metrics */}
                <div className="grid grid-cols-4 gap-4">
                  <div className="text-center">
                    <div className="text-xl font-black text-primary">{campaign.stats.totalLeads.toLocaleString()}</div>
                    <div className="text-xs text-muted-foreground font-bold uppercase">Leads</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-black text-foreground">{campaign.stats.totalClicks.toLocaleString()}</div>
                    <div className="text-xs text-muted-foreground font-bold uppercase">Clicks</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-black text-green-400">{campaign.stats.conversionRate}%</div>
                    <div className="text-xs text-muted-foreground font-bold uppercase">Conv Rate</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-black text-foreground">{campaign.stats.uniqueCustomers.toLocaleString()}</div>
                    <div className="text-xs text-muted-foreground font-bold uppercase">Customers</div>
                  </div>
                </div>

                {/* Additional Stats */}
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground font-medium">Total Events:</span>
                    <span className="text-sm font-bold text-blue-400">{campaign.stats.totalEvents.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground font-medium">Duplicate Rate:</span>
                    <span className={`text-sm font-bold ${getRateColor(campaign.stats.duplicateRate, 'duplicate')}`}>
                      {campaign.stats.duplicateRate}%
                    </span>
                  </div>
                </div>

                {/* Action Button */}
                <button className="w-full premium-button-secondary">
                  <AnalyticsIcon size={16} className="mr-2" />
                  View Full Analytics
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        /* Table View */
        <div className="premium-card overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-muted/10 border-b border-muted/20">
                <tr>
                  <th className="text-left p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Campaign</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Status</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Leads</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Clicks</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Conv Rate</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Customers</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Created</th>
                  <th className="text-center p-4 text-xs font-bold text-muted-foreground uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredCampaigns.map((campaign) => (
                  <tr key={campaign.id} className="border-b border-muted/10 hover:bg-muted/5 transition-colors">
                    <td className="p-4">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-primary rounded-xl flex items-center justify-center shadow-lg overflow-hidden flex-shrink-0">
                          {campaign.logoUrl ? (
                            <img
                              src={campaign.logoUrl}
                              alt={`${campaign.name} logo`}
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <TargetIcon size={20} />
                          )}
                        </div>
                        <div>
                          <div className="font-semibold text-foreground">{campaign.name}</div>
                          <div className="text-sm text-muted-foreground">{campaign.slug}</div>
                          {campaign.description && (
                            <div className="text-xs text-gray-400 mt-1">{campaign.description}</div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="p-4 text-center">
                      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-bold ${
                        campaign.isActive
                          ? 'bg-green-500/20 text-green-400'
                          : 'bg-red-500/20 text-red-400'
                      }`}>
                        {campaign.isActive ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="p-4 text-center">
                      <div className="font-bold text-primary">{campaign.stats.totalLeads.toLocaleString()}</div>
                    </td>
                    <td className="p-4 text-center">
                      <div className="font-bold text-foreground">{campaign.stats.totalClicks.toLocaleString()}</div>
                    </td>
                    <td className="p-4 text-center">
                      <div className="font-bold text-green-400">{campaign.stats.conversionRate}%</div>
                    </td>
                    <td className="p-4 text-center">
                      <div className="font-bold text-foreground">{campaign.stats.uniqueCustomers.toLocaleString()}</div>
                    </td>
                    <td className="p-4 text-center">
                      <div className="text-sm text-muted-foreground">
                        {new Date(campaign.createdAt).toLocaleDateString()}
                      </div>
                    </td>
                    <td className="p-4 text-center">
                      <button
                        onClick={() => handleEditCampaign(campaign)}
                        className="premium-button-secondary px-3 py-1 text-xs"
                      >
                        Manage
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Create Campaign Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="premium-card max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-black text-primary">
                  {editingCampaign ? 'Edit Campaign' : 'Create New Campaign'}
                </h2>
                <button
                  onClick={resetModal}
                  className="w-8 h-8 rounded-full bg-muted/20 flex items-center justify-center text-muted-foreground hover:bg-muted/40"
                >
                  ×
                </button>
              </div>

              <form onSubmit={createCampaign} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-bold text-foreground mb-2">
                      Campaign Name *
                    </label>
                    <input
                      type="text"
                      value={formData.name}
                      onChange={(e) => handleNameChange(e.target.value)}
                      className="premium-input"
                      placeholder="Enter campaign name"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-bold text-foreground mb-2">
                      Campaign Slug *
                      <span className="text-xs text-muted-foreground font-normal ml-1">(URL-friendly ID)</span>
                    </label>
                    <input
                      type="text"
                      value={formData.slug}
                      onChange={(e) => setFormData(prev => ({ ...prev, slug: e.target.value }))}
                      className="premium-input"
                      placeholder="e.g., summer-2024-promo"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-bold text-foreground mb-2">
                    Description
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    className="premium-input min-h-20"
                    placeholder="Campaign description (optional)"
                    rows={3}
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-foreground mb-2">
                    Brand Logo URL
                    <span className="text-xs text-muted-foreground font-normal ml-1">(optional)</span>
                  </label>
                  <input
                    type="url"
                    value={formData.logoUrl}
                    onChange={(e) => setFormData(prev => ({ ...prev, logoUrl: e.target.value }))}
                    className="premium-input"
                    placeholder="https://example.com/logo.png"
                  />
                </div>

                <div>
                  <div className="flex items-center justify-between mb-4">
                    <label className="block text-sm font-bold text-foreground">
                      Conversion Types
                    </label>
                    <button
                      type="button"
                      onClick={() => setShowNewConversionForm(true)}
                      className="flex items-center gap-2 px-3 py-1.5 text-xs bg-primary/20 text-primary rounded-lg hover:bg-primary/30 transition-colors"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                      </svg>
                      Create New
                    </button>
                  </div>

                  {/* Inline form to create new conversion type */}
                  {showNewConversionForm && (
                    <div className="mb-4 p-4 border border-muted/20 rounded-xl bg-muted/5">
                      <form onSubmit={createNewConversionType} className="space-y-3">
                        <div>
                          <input
                            type="text"
                            required
                            value={newConversionData.name}
                            onChange={(e) => setNewConversionData(prev => ({ ...prev, name: e.target.value }))}
                            className="premium-input text-sm"
                            placeholder="Conversion type name (e.g., Purchase, Sign Up)"
                          />
                        </div>
                        <div>
                          <input
                            type="text"
                            value={newConversionData.description}
                            onChange={(e) => setNewConversionData(prev => ({ ...prev, description: e.target.value }))}
                            className="premium-input text-sm"
                            placeholder="Description (optional)"
                          />
                        </div>
                        <div className="flex gap-2">
                          <button
                            type="submit"
                            disabled={isCreatingConversion}
                            className="flex-1 px-3 py-2 text-xs bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50"
                          >
                            {isCreatingConversion ? 'Creating...' : 'Create'}
                          </button>
                          <button
                            type="button"
                            onClick={() => {
                              setShowNewConversionForm(false)
                              setNewConversionData({ name: '', description: '' })
                            }}
                            className="px-3 py-2 text-xs border border-muted/20 text-muted-foreground rounded-lg hover:bg-muted/10 transition-colors"
                          >
                            Cancel
                          </button>
                        </div>
                      </form>
                    </div>
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {conversionTypes.map((conversionType) => (
                      <label
                        key={conversionType.id}
                        className="flex items-center space-x-3 p-3 rounded-xl bg-muted/10 hover:bg-muted/20 cursor-pointer"
                      >
                        <input
                          type="checkbox"
                          checked={formData.conversionTypeIds.includes(conversionType.id)}
                          onChange={() => handleConversionTypeToggle(conversionType.id)}
                          className="w-4 h-4 text-primary bg-transparent border-2 border-muted-foreground rounded focus:ring-primary focus:ring-2"
                        />
                        <div>
                          <div className="text-sm font-bold text-foreground">{conversionType.name}</div>
                          {conversionType.description && (
                            <div className="text-xs text-muted-foreground">{conversionType.description}</div>
                          )}
                        </div>
                      </label>
                    ))}
                  </div>
                  {conversionTypes.length === 0 && (
                    <p className="text-sm text-muted-foreground">No conversion types available. Create one above to get started.</p>
                  )}
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-muted/20">
                  <button
                    type="button"
                    onClick={() => setShowCreateModal(false)}
                    className="premium-button-secondary"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={isCreating}
                    className="premium-button-primary"
                  >
                    {isCreating
                      ? (editingCampaign ? 'Updating...' : 'Creating...')
                      : (editingCampaign ? 'Update Campaign' : 'Create Campaign')
                    }
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}